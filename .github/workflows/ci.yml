name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'typescript/**'
      - 'python/**'
      - 'rust/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'typescript/**'
      - 'python/**'
      - 'rust/**'
      - '.github/workflows/ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      typescript: ${{ steps.changes.outputs.typescript }}
      python: ${{ steps.changes.outputs.python }}
      rust: ${{ steps.changes.outputs.rust }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          typescript:
            - 'typescript/**'
          python:
            - 'python/**'
          rust:
            - 'rust/**'

  typescript:
    needs: detect-changes
    if: needs.detect-changes.outputs.typescript == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Cache bun dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.bun/install/cache
          typescript/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('typescript/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      working-directory: ./typescript
      run: bun install

    - name: Run checks in parallel
      working-directory: ./typescript
      run: |
        set +e
        bunx prettier --check . &
        PRETTIER_PID=$!
        bunx eslint &
        ESLINT_PID=$!
        bunx tsc --noEmit &
        TSC_PID=$!

        wait $PRETTIER_PID; PRETTIER_CODE=$?
        wait $ESLINT_PID; ESLINT_CODE=$?
        wait $TSC_PID; TSC_CODE=$?

        if [ $PRETTIER_CODE -ne 0 ]; then echo "::warning::Prettier check failed"; fi
        if [ $ESLINT_CODE -ne 0 ]; then echo "::warning::ESLint check failed"; fi
        if [ $TSC_CODE -ne 0 ]; then echo "::warning::TypeScript check failed"; fi

    - name: Test
      working-directory: ./typescript
      run: bunx vitest run --reporter=verbose

  python:
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4

    - uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "python/uv.lock"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      working-directory: ./python
      run: uv sync --dev

    - name: Run checks in parallel
      working-directory: ./python
      run: |
        set +e
        uv run ruff format --check src/ &
        FORMAT_PID=$!
        uv run ruff check src/ &
        LINT_PID=$!
        uv run mypy src/ &
        MYPY_PID=$!
        
        wait $FORMAT_PID; FORMAT_CODE=$?
        wait $LINT_PID; LINT_CODE=$?
        wait $MYPY_PID; MYPY_CODE=$?
        
        if [ $FORMAT_CODE -ne 0 ]; then echo "::warning::Ruff format check failed"; fi
        if [ $LINT_CODE -ne 0 ]; then echo "::warning::Ruff lint check failed"; fi
        if [ $MYPY_CODE -ne 0 ]; then echo "::warning::MyPy check failed"; fi

    - name: Test
      working-directory: ./python
      run: uv run pytest -v

  rust:
    needs: detect-changes
    if: needs.detect-changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: rust

    - name: Run checks in parallel
      working-directory: ./rust
      run: |
        set +e
        cargo fmt --check &
        FMT_PID=$!
        cargo clippy -- -D warnings &
        CLIPPY_PID=$!
        
        wait $FMT_PID; FMT_CODE=$?
        wait $CLIPPY_PID; CLIPPY_CODE=$?
        
        if [ $FMT_CODE -ne 0 ]; then echo "::warning::Cargo fmt check failed"; fi
        if [ $CLIPPY_CODE -ne 0 ]; then echo "::warning::Clippy check failed"; fi

    - name: Test
      working-directory: ./rust
      run: cargo test --verbose
