name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      typescript: ${{ steps.filter.outputs.typescript }}
      python: ${{ steps.filter.outputs.python }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'rust/**'
            typescript:
              - 'typescript/**'
            python:
              - 'python/**'

  rust:
    name: Rust
    needs: detect-changes
    if: needs.detect-changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust toolchain and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            ~/.rustup
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: |
            rust-toolchain-${{ runner.os }}-

      - name: Cache Cargo build output
        uses: actions/cache@v4
        with:
          path: rust/target
          key: rust-target-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: |
            rust-target-${{ runner.os }}-

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Rust dependencies
        working-directory: ./rust
        run: cargo fetch

      - name: Format
        working-directory: ./rust
        run: cargo fmt --all -- --check

      - name: Lint
        working-directory: ./rust
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Type Check
        working-directory: ./rust
        run: cargo check --all

      - name: Test
        working-directory: ./rust
        run: cargo test --all

  typescript:
    name: TypeScript
    needs: detect-changes
    if: needs.detect-changes.outputs.typescript == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            typescript/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('typescript/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: ./typescript
        run: bun install

      - name: Format & Lint
        working-directory: ./typescript
        run: bunx biome check --write .

      - name: Type Check
        working-directory: ./typescript
        run: bunx tsc --noEmit

      - name: Test
        working-directory: ./typescript
        run: bun test

  python:
    name: Python
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v4
        with:
          version: latest

      - name: Cache UV and pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            python/.venv
            ~/.cache/pip
          key: ${{ runner.os }}-uv-pip-${{ hashFiles('python/uv.lock', 'python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-pip-

      - name: Install dependencies
        working-directory: ./python
        run: uv sync --dev

      - name: Format
        working-directory: ./python
        run: uv run ruff format src/

      - name: Lint
        working-directory: ./python
        run: uv run ruff check src/

      - name: Type Check
        working-directory: ./python
        run: uv run mypy src/

      - name: Test
        working-directory: ./python
        run: uv run pytest
